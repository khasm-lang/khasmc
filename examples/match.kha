open Stdlib

type List a =
     | Nil
     | Cons a (List a)


sig <q w> (q -> w) -> List q -> List w
let rec map f x =
    match x with
    | 'Nil => Nil
    | Cons a b => Cons (f a) (map f b)
    end

sig <w> (w -> ()) -> List w -> ()
let rec iter f x =
    match x with
    | 'Nil => ()
    | Cons a b => f a; iter f b
    end

sig int -> List int
let rec make i =
    if i = 0 then
       Nil
    else
       Cons i (make (i - 1))
       
sig () -> ()
let main q =
    let l = make 1000 in
    iter print_int l
