binop ::=
      POW MUL DIV MOD ADD SUB
      CAR AT EQ LT GT AND DOL
      PIP > 1
      SEMICOLON

typesig_base ::=
	     id (id nonempty_list)
	     LPAREN (typesig list_sepby ",") RPAREN
	     LPAREN typesig RPAREN

typesig_lesser ::=
	       typesig_base "->" typesig_lesser
	       typesig_base

typesig ::=
	"<" id nonempty_list ">" typesig_lesser
	typesig_lesser

pattern ::=
	TICK id
	IDENT (id nonempty_list)
	IDENT
	UNDERSCORE
	LPAREN (pattern list_sepby ",") RPAREN
	INT

matchbody ::=
	  ("|" pattern "=>" expr) list 

base ::= 
     id
     id (id list)
     int
     str
     LPAREN (expr list_sepby ",") RPAREN

expr ::=
     base
     expr binop expr
     prefix expr
     IF expr THEN expr ELSE expr
     LET id "=" expr IN expr
     id ("." id) nonempty_list
     FUN id ":" typesig "=>" expr
     TFUN id "=>" expr
     MATCH expr WITH matchbody END

letin ::=
      SIG typesig LET id (id list) "=" expr

module ::= MODULE IDENT "=" (toplevel list) END

bind ::= binop "=" id

intextern ::= INTEXTERN int INTIDENT ":" typesig "=" id

open ::= OPEN IDENT

adt_or_gadt ::=
	    id ":" typesig
	    id (id list)

adt_list ::=
	 ("|" adt_or_gadt) list

type_helper ::=
	    typesig
	    adt_list

type ::= TYPE (id list) "=" type_helper

toplevel ::=
	 letin
	 module
	 bind
	 intextern
	 open
	 type
	 eof

program ::= toplevel list
