internal_extern `int_add = iadd : ∀a, a -> a -> a 
internal_extern `int_sub = isub : ∀a, a -> a -> a
internal_extern `int_mul = imul : ∀a, a -> a -> a
internal_extern `int_div = idiv : ∀a, a -> a -> a

internal_extern `float_add = fadd : ∀a, a -> a -> a
internal_extern `float_sub = fsub : ∀a, a -> a -> a
internal_extern `float_div = fdiv : ∀a, a -> a -> a
internal_extern `float_mul = fmul : ∀a, a -> a -> a

internal_extern `print = print : ∀a, a -> ()

internal_extern `s_eq = s_eq : ∀a, a -> a -> bool

bind (=) = s_eq

bind (+) = iadd
bind (-) = isub
bind (/) = idiv
bind ( * ) = imul

let pipe x f
    : ∀a b, a -> (a -> b) -> b
    = f x

bind (|>) = pipe

let apply f x 
    : ∀a b, (a -> b) -> a -> b 
    = f x

bind ($) = apply

let compose f g x
    : ∀a b c, (b -> c) -> (a -> b) -> a -> c
    = f (g x)

bind (%) = compose

let rcompose f g x
    : ∀a b c, (a -> b) -> (b -> c) -> a -> c
    = g (f x)

bind (%>) = rcompose
