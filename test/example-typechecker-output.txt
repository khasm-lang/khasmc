



CHECK
(Base (Ident "_Kshow"))
∀a, (a) -> (())


INFER
(Base (Ident "_Kshow"))


INFER RES:
(Base (Ident "_Kshow"))
:
∀6_t, (6_t) -> (())


UNIFY
{ metas = [] }
∀6_t, (6_t) -> (())
∀a, (a) -> (())
FORALL


UNIFY
{ metas = [] }
($m7) -> (())
(a) -> (())
MAP


UNIFY
{ metas = [] }
$m7
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
()
()
BOT


UNIFY RESULT:
()


UNIFY RESULT:
(a) -> (())


UNIFY RESULT:
∀6_t, (a) -> (())


CHECK
(Base (Ident "_Kadd"))
∀a, (a) -> ((a) -> (a))


INFER
(Base (Ident "_Kadd"))


INFER RES:
(Base (Ident "_Kadd"))
:
∀0_t, (0_t) -> ((0_t) -> (0_t))


UNIFY
{ metas = [] }
∀0_t, (0_t) -> ((0_t) -> (0_t))
∀a, (a) -> ((a) -> (a))
FORALL


UNIFY
{ metas = [] }
($m9) -> (($m9) -> ($m9))
(a) -> ((a) -> (a))
MAP


UNIFY
{ metas = [] }
$m9
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m9) -> ($m9)
(a) -> (a)
MAP


UNIFY
{ metas = [] }
$m9
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
$m9
a
META


UNIFY RESULT:
a


UNIFY RESULT:
(a) -> (a)


UNIFY RESULT:
(a) -> ((a) -> (a))


UNIFY RESULT:
∀0_t, (a) -> ((a) -> (a))


CHECK
(Base (Ident "_Ksub"))
∀a, (a) -> ((a) -> (a))


INFER
(Base (Ident "_Ksub"))


INFER RES:
(Base (Ident "_Ksub"))
:
∀1_t, (1_t) -> ((1_t) -> (1_t))


UNIFY
{ metas = [] }
∀1_t, (1_t) -> ((1_t) -> (1_t))
∀a, (a) -> ((a) -> (a))
FORALL


UNIFY
{ metas = [] }
($m11) -> (($m11) -> ($m11))
(a) -> ((a) -> (a))
MAP


UNIFY
{ metas = [] }
$m11
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m11) -> ($m11)
(a) -> (a)
MAP


UNIFY
{ metas = [] }
$m11
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
$m11
a
META


UNIFY RESULT:
a


UNIFY RESULT:
(a) -> (a)


UNIFY RESULT:
(a) -> ((a) -> (a))


UNIFY RESULT:
∀1_t, (a) -> ((a) -> (a))


CHECK
(Base (Ident "_Kdiv"))
∀a, (a) -> ((a) -> (a))


INFER
(Base (Ident "_Kdiv"))


INFER RES:
(Base (Ident "_Kdiv"))
:
∀2_t, (2_t) -> ((2_t) -> (2_t))


UNIFY
{ metas = [] }
∀2_t, (2_t) -> ((2_t) -> (2_t))
∀a, (a) -> ((a) -> (a))
FORALL


UNIFY
{ metas = [] }
($m13) -> (($m13) -> ($m13))
(a) -> ((a) -> (a))
MAP


UNIFY
{ metas = [] }
$m13
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m13) -> ($m13)
(a) -> (a)
MAP


UNIFY
{ metas = [] }
$m13
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
$m13
a
META


UNIFY RESULT:
a


UNIFY RESULT:
(a) -> (a)


UNIFY RESULT:
(a) -> ((a) -> (a))


UNIFY RESULT:
∀2_t, (a) -> ((a) -> (a))


CHECK
(Base (Ident "_Kmul"))
∀a, (a) -> ((a) -> (a))


INFER
(Base (Ident "_Kmul"))


INFER RES:
(Base (Ident "_Kmul"))
:
∀3_t, (3_t) -> ((3_t) -> (3_t))


UNIFY
{ metas = [] }
∀3_t, (3_t) -> ((3_t) -> (3_t))
∀a, (a) -> ((a) -> (a))
FORALL


UNIFY
{ metas = [] }
($m15) -> (($m15) -> ($m15))
(a) -> ((a) -> (a))
MAP


UNIFY
{ metas = [] }
$m15
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m15) -> ($m15)
(a) -> (a)
MAP


UNIFY
{ metas = [] }
$m15
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
$m15
a
META


UNIFY RESULT:
a


UNIFY RESULT:
(a) -> (a)


UNIFY RESULT:
(a) -> ((a) -> (a))


UNIFY RESULT:
∀3_t, (a) -> ((a) -> (a))


CHECK
(Base (Ident "_Kpow"))
∀a, (a) -> ((a) -> (a))


INFER
(Base (Ident "_Kpow"))


INFER RES:
(Base (Ident "_Kpow"))
:
∀4_t, (4_t) -> ((4_t) -> (4_t))


UNIFY
{ metas = [] }
∀4_t, (4_t) -> ((4_t) -> (4_t))
∀a, (a) -> ((a) -> (a))
FORALL


UNIFY
{ metas = [] }
($m17) -> (($m17) -> ($m17))
(a) -> ((a) -> (a))
MAP


UNIFY
{ metas = [] }
$m17
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m17) -> ($m17)
(a) -> (a)
MAP


UNIFY
{ metas = [] }
$m17
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
$m17
a
META


UNIFY RESULT:
a


UNIFY RESULT:
(a) -> (a)


UNIFY RESULT:
(a) -> ((a) -> (a))


UNIFY RESULT:
∀4_t, (a) -> ((a) -> (a))


CHECK
(Base (Ident "_Keq"))
∀a, (a) -> ((a) -> (bool))


INFER
(Base (Ident "_Keq"))


INFER RES:
(Base (Ident "_Keq"))
:
∀5_t, (5_t) -> ((5_t) -> (bool))


UNIFY
{ metas = [] }
∀5_t, (5_t) -> ((5_t) -> (bool))
∀a, (a) -> ((a) -> (bool))
FORALL


UNIFY
{ metas = [] }
($m19) -> (($m19) -> (bool))
(a) -> ((a) -> (bool))
MAP


UNIFY
{ metas = [] }
$m19
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
($m19) -> (bool)
(a) -> (bool)
MAP


UNIFY
{ metas = [] }
$m19
a
META


UNIFY RESULT:
a


UNIFY
{ metas = [] }
bool
bool
BASE


UNIFY RESULT:
bool


UNIFY RESULT:
(a) -> (bool)


UNIFY RESULT:
(a) -> ((a) -> (bool))


UNIFY RESULT:
∀5_t, (a) -> ((a) -> (bool))


CHECK
(AnnotLam ("x", (TSBase "int"), (Base (Int "6"))))
(int) -> (int)


INFER
(AnnotLam ("x", (TSBase "int"), (Base (Int "6"))))


INFER
(Base (Int "6"))


INFER RES:
(Base (Int "6"))
:
int


INFER RES:
(AnnotLam ("x", (TSBase "int"), (Base (Int "6"))))
:
(int) -> (int)


UNIFY
{ metas = [] }
(int) -> (int)
(int) -> (int)
MAP


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


UNIFY RESULT:
(int) -> (int)


CHECK
(AnnotLam ("n", (TSBase "int"),
   (IfElse (
      (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
         (Base (Int "0")))),
      (Base (Ident "n")),
      (IfElse (
         (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
            (Base (Int "1")))),
         (Base (Ident "n")),
         (FCall (
            (FCall ((Base (Ident "+")),
               (FCall ((Base (Ident "fib")),
                  (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                     (Base (Int "1"))))
                  ))
               )),
            (FCall ((Base (Ident "fib")),
               (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                  (Base (Int "2"))))
               ))
            ))
         ))
      ))
   ))
(int) -> (int)


INFER
(AnnotLam ("n", (TSBase "int"),
   (IfElse (
      (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
         (Base (Int "0")))),
      (Base (Ident "n")),
      (IfElse (
         (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
            (Base (Int "1")))),
         (Base (Ident "n")),
         (FCall (
            (FCall ((Base (Ident "+")),
               (FCall ((Base (Ident "fib")),
                  (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                     (Base (Int "1"))))
                  ))
               )),
            (FCall ((Base (Ident "fib")),
               (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                  (Base (Int "2"))))
               ))
            ))
         ))
      ))
   ))


INFER
(IfElse (
   (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "0"))
      )),
   (Base (Ident "n")),
   (IfElse (
      (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
         (Base (Int "1")))),
      (Base (Ident "n")),
      (FCall (
         (FCall ((Base (Ident "+")),
            (FCall ((Base (Ident "fib")),
               (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                  (Base (Int "1"))))
               ))
            )),
         (FCall ((Base (Ident "fib")),
            (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
               (Base (Int "2"))))
            ))
         ))
      ))
   ))


CHECK
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "0"))))
bool


INFER
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "0"))))


FCALL
(FCall ((Base (Ident "=")), (Base (Ident "n"))))
(Base (Int "0"))


INFER
(FCall ((Base (Ident "=")), (Base (Ident "n"))))


FCALL
(Base (Ident "="))
(Base (Ident "n"))


INFER
(Base (Ident "="))


INFER RES:
(Base (Ident "="))
:
∀20_t, (20_t) -> ((20_t) -> (bool))


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int
INST r. : ($m21) -> (($m21) -> (bool))
INST l. : int


UNIFY
{ metas = [] }
$m21
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "=")), (Base (Ident "n"))))
:
(int) -> (bool)


INFER
(Base (Int "0"))


INFER RES:
(Base (Int "0"))
:
int
INST r. : (int) -> (bool)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "0"))))
:
bool


UNIFY
{ metas = [] }
bool
bool
BASE


UNIFY RESULT:
bool


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int


CHECK
(IfElse (
   (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))
      )),
   (Base (Ident "n")),
   (FCall (
      (FCall ((Base (Ident "+")),
         (FCall ((Base (Ident "fib")),
            (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
               (Base (Int "1"))))
            ))
         )),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "2"))))
         ))
      ))
   ))
int


INFER
(IfElse (
   (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))
      )),
   (Base (Ident "n")),
   (FCall (
      (FCall ((Base (Ident "+")),
         (FCall ((Base (Ident "fib")),
            (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
               (Base (Int "1"))))
            ))
         )),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "2"))))
         ))
      ))
   ))


CHECK
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))))
bool


INFER
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))))


FCALL
(FCall ((Base (Ident "=")), (Base (Ident "n"))))
(Base (Int "1"))


INFER
(FCall ((Base (Ident "=")), (Base (Ident "n"))))


FCALL
(Base (Ident "="))
(Base (Ident "n"))


INFER
(Base (Ident "="))


INFER RES:
(Base (Ident "="))
:
∀20_t, (20_t) -> ((20_t) -> (bool))


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int
INST r. : ($m22) -> (($m22) -> (bool))
INST l. : int


UNIFY
{ metas = [] }
$m22
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "=")), (Base (Ident "n"))))
:
(int) -> (bool)


INFER
(Base (Int "1"))


INFER RES:
(Base (Int "1"))
:
int
INST r. : (int) -> (bool)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))))
:
bool


UNIFY
{ metas = [] }
bool
bool
BASE


UNIFY RESULT:
bool


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int


CHECK
(FCall (
   (FCall ((Base (Ident "+")),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "1"))))
         ))
      )),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "2"))))
      ))
   ))
int


INFER
(FCall (
   (FCall ((Base (Ident "+")),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "1"))))
         ))
      )),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "2"))))
      ))
   ))


FCALL
(FCall ((Base (Ident "+")),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "1"))))
      ))
   ))
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))
      ))
   ))


INFER
(FCall ((Base (Ident "+")),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "1"))))
      ))
   ))


FCALL
(Base (Ident "+"))
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))
      ))
   ))


INFER
(Base (Ident "+"))


INFER RES:
(Base (Ident "+"))
:
∀10_t, (10_t) -> ((10_t) -> (10_t))


INFER
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))
      ))
   ))


FCALL
(Base (Ident "fib"))
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))))


INFER
(Base (Ident "fib"))


INFER RES:
(Base (Ident "fib"))
:
(int) -> (int)


INFER
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))))


FCALL
(FCall ((Base (Ident "-")), (Base (Ident "n"))))
(Base (Int "1"))


INFER
(FCall ((Base (Ident "-")), (Base (Ident "n"))))


FCALL
(Base (Ident "-"))
(Base (Ident "n"))


INFER
(Base (Ident "-"))


INFER RES:
(Base (Ident "-"))
:
∀12_t, (12_t) -> ((12_t) -> (12_t))


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int
INST r. : ($m24) -> (($m24) -> ($m24))
INST l. : int


UNIFY
{ metas = [] }
$m24
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "-")), (Base (Ident "n"))))
:
(int) -> (int)


INFER
(Base (Int "1"))


INFER RES:
(Base (Int "1"))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "1"))
      ))
   ))
:
int
INST r. : ($m23) -> (($m23) -> ($m23))
INST l. : int


UNIFY
{ metas = [] }
$m23
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "+")),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "1"))))
      ))
   ))
:
(int) -> (int)


INFER
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))
      ))
   ))


FCALL
(Base (Ident "fib"))
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))))


INFER
(Base (Ident "fib"))


INFER RES:
(Base (Ident "fib"))
:
(int) -> (int)


INFER
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))))


FCALL
(FCall ((Base (Ident "-")), (Base (Ident "n"))))
(Base (Int "2"))


INFER
(FCall ((Base (Ident "-")), (Base (Ident "n"))))


FCALL
(Base (Ident "-"))
(Base (Ident "n"))


INFER
(Base (Ident "-"))


INFER RES:
(Base (Ident "-"))
:
∀12_t, (12_t) -> ((12_t) -> (12_t))


INFER
(Base (Ident "n"))


INFER RES:
(Base (Ident "n"))
:
int
INST r. : ($m25) -> (($m25) -> ($m25))
INST l. : int


UNIFY
{ metas = [] }
$m25
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "-")), (Base (Ident "n"))))
:
(int) -> (int)


INFER
(Base (Int "2"))


INFER RES:
(Base (Int "2"))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "fib")),
   (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))), (Base (Int "2"))
      ))
   ))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall (
   (FCall ((Base (Ident "+")),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "1"))))
         ))
      )),
   (FCall ((Base (Ident "fib")),
      (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
         (Base (Int "2"))))
      ))
   ))
:
int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(IfElse (
   (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "1"))
      )),
   (Base (Ident "n")),
   (FCall (
      (FCall ((Base (Ident "+")),
         (FCall ((Base (Ident "fib")),
            (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
               (Base (Int "1"))))
            ))
         )),
      (FCall ((Base (Ident "fib")),
         (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
            (Base (Int "2"))))
         ))
      ))
   ))
:
int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(IfElse (
   (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))), (Base (Int "0"))
      )),
   (Base (Ident "n")),
   (IfElse (
      (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
         (Base (Int "1")))),
      (Base (Ident "n")),
      (FCall (
         (FCall ((Base (Ident "+")),
            (FCall ((Base (Ident "fib")),
               (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                  (Base (Int "1"))))
               ))
            )),
         (FCall ((Base (Ident "fib")),
            (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
               (Base (Int "2"))))
            ))
         ))
      ))
   ))
:
int


INFER RES:
(AnnotLam ("n", (TSBase "int"),
   (IfElse (
      (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
         (Base (Int "0")))),
      (Base (Ident "n")),
      (IfElse (
         (FCall ((FCall ((Base (Ident "=")), (Base (Ident "n")))),
            (Base (Int "1")))),
         (Base (Ident "n")),
         (FCall (
            (FCall ((Base (Ident "+")),
               (FCall ((Base (Ident "fib")),
                  (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                     (Base (Int "1"))))
                  ))
               )),
            (FCall ((Base (Ident "fib")),
               (FCall ((FCall ((Base (Ident "-")), (Base (Ident "n")))),
                  (Base (Int "2"))))
               ))
            ))
         ))
      ))
   ))
:
(int) -> (int)


UNIFY
{ metas = [] }
(int) -> (int)
(int) -> (int)
MAP


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


UNIFY RESULT:
(int) -> (int)


CHECK
(AnnotLam ("()", TSBottom,
   (FCall ((Base (Ident "show")),
      (FCall ((Base (Ident "fib")), (Base (Int "35"))))))
   ))
(()) -> (())


INFER
(AnnotLam ("()", TSBottom,
   (FCall ((Base (Ident "show")),
      (FCall ((Base (Ident "fib")), (Base (Int "35"))))))
   ))


INFER
(FCall ((Base (Ident "show")),
   (FCall ((Base (Ident "fib")), (Base (Int "35"))))))


FCALL
(Base (Ident "show"))
(FCall ((Base (Ident "fib")), (Base (Int "35"))))


INFER
(Base (Ident "show"))


INFER RES:
(Base (Ident "show"))
:
∀8_t, (8_t) -> (())


INFER
(FCall ((Base (Ident "fib")), (Base (Int "35"))))


FCALL
(Base (Ident "fib"))
(Base (Int "35"))


INFER
(Base (Ident "fib"))


INFER RES:
(Base (Ident "fib"))
:
(int) -> (int)


INFER
(Base (Int "35"))


INFER RES:
(Base (Int "35"))
:
int
INST r. : (int) -> (int)
INST l. : int


UNIFY
{ metas = [] }
int
int
BASE


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "fib")), (Base (Int "35"))))
:
int
INST r. : ($m26) -> (())
INST l. : int


UNIFY
{ metas = [] }
$m26
int
META


UNIFY RESULT:
int


INFER RES:
(FCall ((Base (Ident "show")),
   (FCall ((Base (Ident "fib")), (Base (Int "35"))))))
:
()


INFER RES:
(AnnotLam ("()", TSBottom,
   (FCall ((Base (Ident "show")),
      (FCall ((Base (Ident "fib")), (Base (Int "35"))))))
   ))
:
(()) -> (())


UNIFY
{ metas = [] }
(()) -> (())
(()) -> (())
MAP


UNIFY
{ metas = [] }
()
()
BOT


UNIFY RESULT:
()


UNIFY
{ metas = [] }
()
()
BOT


UNIFY RESULT:
()


UNIFY RESULT:
(()) -> (())

Status: success

khasmc done in 0.004936s
