extern 2 `int_add : <a> a -> a -> a  = iadd 
extern 2 `int_sub : <a> a -> a -> a  = isub 
extern 2 `int_mul: <a> a -> a -> a   = imul 
extern 2 `int_div : <a> a -> a -> a = idiv 

extern 2 `float_add: <a> a -> a -> a  = fadd 
extern 2 `float_sub: <a> a -> a -> a  = fsub 
extern 2 `float_div : <a> a -> a -> a = fdiv 
extern 2 `float_mul : <a> a -> a -> a = fmul 

extern 1 `print_int: int -> () = print_int 
extern 1 `print_str : string -> () = print_str
extern 1 `print_float : float -> () = print_float 

extern 2 `s_eq : <a> a -> a -> bool = s_eq

bind = = s_eq

bind + = iadd
bind - = isub
bind / = idiv
bind * = imul

bind +. = fadd
bind -. = fsub
bind *. = fmul
bind /. = fdiv

sig <a b> a -> (a -> b) -> b
let pipe x0 f1
    = f1 x0

bind |> = pipe

sig <a b> (a -> b) -> a -> b 
let apply f2 x3
    = f2 x3

bind <| = apply

sig <a b c> (b -> c) -> (a -> b) -> a -> c
let compose f4 g5 x6
    = f4 (g5 x6)

bind >> = compose

sig <a b c> (a -> b) -> (b -> c) -> a -> c
let rcompose f7 g8 x9
    = g8 (f7 x9)

bind << = rcompose
